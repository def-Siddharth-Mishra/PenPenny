// Mocks generated by Mockito 5.4.4 from annotations
// in penpenny/test/unit/payment_crud_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:penpenny/domain/entities/account.dart' as _i3;
import 'package:penpenny/domain/entities/payment.dart' as _i2;
import 'package:penpenny/domain/repositories/account_repository.dart' as _i6;
import 'package:penpenny/domain/repositories/payment_repository.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePayment_0 extends _i1.SmartFake implements _i2.Payment {
  _FakePayment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAccount_1 extends _i1.SmartFake implements _i3.Account {
  _FakeAccount_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PaymentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentRepository extends _i1.Mock implements _i4.PaymentRepository {
  MockPaymentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Payment>> getAllPayments() => (super.noSuchMethod(
        Invocation.method(
          #getAllPayments,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Payment>>.value(<_i2.Payment>[]),
      ) as _i5.Future<List<_i2.Payment>>);

  @override
  _i5.Future<_i2.Payment?> getPaymentById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPaymentById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Payment?>.value(),
      ) as _i5.Future<_i2.Payment?>);

  @override
  _i5.Future<List<_i2.Payment>> getPaymentsByAccount(int? accountId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaymentsByAccount,
          [accountId],
        ),
        returnValue: _i5.Future<List<_i2.Payment>>.value(<_i2.Payment>[]),
      ) as _i5.Future<List<_i2.Payment>>);

  @override
  _i5.Future<List<_i2.Payment>> getPaymentsByCategory(int? categoryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaymentsByCategory,
          [categoryId],
        ),
        returnValue: _i5.Future<List<_i2.Payment>>.value(<_i2.Payment>[]),
      ) as _i5.Future<List<_i2.Payment>>);

  @override
  _i5.Future<List<_i2.Payment>> getPaymentsByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPaymentsByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i5.Future<List<_i2.Payment>>.value(<_i2.Payment>[]),
      ) as _i5.Future<List<_i2.Payment>>);

  @override
  _i5.Future<_i2.Payment> createPayment(_i2.Payment? payment) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPayment,
          [payment],
        ),
        returnValue: _i5.Future<_i2.Payment>.value(_FakePayment_0(
          this,
          Invocation.method(
            #createPayment,
            [payment],
          ),
        )),
      ) as _i5.Future<_i2.Payment>);

  @override
  _i5.Future<_i2.Payment> updatePayment(_i2.Payment? payment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePayment,
          [payment],
        ),
        returnValue: _i5.Future<_i2.Payment>.value(_FakePayment_0(
          this,
          Invocation.method(
            #updatePayment,
            [payment],
          ),
        )),
      ) as _i5.Future<_i2.Payment>);

  @override
  _i5.Future<void> deletePayment(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deletePayment,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i6.AccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.Account>> getAllAccounts() => (super.noSuchMethod(
        Invocation.method(
          #getAllAccounts,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Account>>.value(<_i3.Account>[]),
      ) as _i5.Future<List<_i3.Account>>);

  @override
  _i5.Future<_i3.Account?> getAccountById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAccountById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Account?>.value(),
      ) as _i5.Future<_i3.Account?>);

  @override
  _i5.Future<_i3.Account> createAccount(_i3.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAccount,
          [account],
        ),
        returnValue: _i5.Future<_i3.Account>.value(_FakeAccount_1(
          this,
          Invocation.method(
            #createAccount,
            [account],
          ),
        )),
      ) as _i5.Future<_i3.Account>);

  @override
  _i5.Future<_i3.Account> updateAccount(_i3.Account? account) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAccount,
          [account],
        ),
        returnValue: _i5.Future<_i3.Account>.value(_FakeAccount_1(
          this,
          Invocation.method(
            #updateAccount,
            [account],
          ),
        )),
      ) as _i5.Future<_i3.Account>);

  @override
  _i5.Future<void> deleteAccount(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteAccount,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.Account?> getDefaultAccount() => (super.noSuchMethod(
        Invocation.method(
          #getDefaultAccount,
          [],
        ),
        returnValue: _i5.Future<_i3.Account?>.value(),
      ) as _i5.Future<_i3.Account?>);

  @override
  _i5.Future<void> setDefaultAccount(int? accountId) => (super.noSuchMethod(
        Invocation.method(
          #setDefaultAccount,
          [accountId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<double> getTotalBalance() => (super.noSuchMethod(
        Invocation.method(
          #getTotalBalance,
          [],
        ),
        returnValue: _i5.Future<double>.value(0.0),
      ) as _i5.Future<double>);

  @override
  _i5.Future<_i3.Account> updateAccountBalance(
    int? accountId,
    double? newBalance,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAccountBalance,
          [
            accountId,
            newBalance,
          ],
        ),
        returnValue: _i5.Future<_i3.Account>.value(_FakeAccount_1(
          this,
          Invocation.method(
            #updateAccountBalance,
            [
              accountId,
              newBalance,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Account>);

  @override
  _i5.Future<void> recalculateAccountBalances() => (super.noSuchMethod(
        Invocation.method(
          #recalculateAccountBalances,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
