// Mocks generated by Mockito 5.4.6 from annotations
// in penpenny/test/widget/dashboard_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;

import 'package:flutter_bloc/flutter_bloc.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:penpenny/domain/usecases/account/create_account.dart' as _i13;
import 'package:penpenny/domain/usecases/account/delete_account.dart' as _i15;
import 'package:penpenny/domain/usecases/account/get_all_accounts.dart' as _i12;
import 'package:penpenny/domain/usecases/account/update_account.dart' as _i14;
import 'package:penpenny/domain/usecases/category/create_category.dart' as _i8;
import 'package:penpenny/domain/usecases/category/delete_category.dart' as _i10;
import 'package:penpenny/domain/usecases/category/get_all_categories.dart'
    as _i7;
import 'package:penpenny/domain/usecases/category/update_category.dart' as _i9;
import 'package:penpenny/domain/usecases/payment/create_payment.dart' as _i3;
import 'package:penpenny/domain/usecases/payment/delete_payment.dart' as _i5;
import 'package:penpenny/domain/usecases/payment/get_all_payments.dart' as _i2;
import 'package:penpenny/domain/usecases/payment/update_payment.dart' as _i4;
import 'package:penpenny/presentation/blocs/accounts/accounts_bloc.dart'
    as _i16;
import 'package:penpenny/presentation/blocs/categories/categories_bloc.dart'
    as _i11;
import 'package:penpenny/presentation/blocs/payments/payments_bloc.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeGetAllPayments_0 extends _i1.SmartFake
    implements _i2.GetAllPayments {
  _FakeGetAllPayments_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreatePayment_1 extends _i1.SmartFake implements _i3.CreatePayment {
  _FakeCreatePayment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdatePayment_2 extends _i1.SmartFake implements _i4.UpdatePayment {
  _FakeUpdatePayment_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeletePayment_3 extends _i1.SmartFake implements _i5.DeletePayment {
  _FakeDeletePayment_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePaymentsState_4 extends _i1.SmartFake implements _i6.PaymentsState {
  _FakePaymentsState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetAllCategories_5 extends _i1.SmartFake
    implements _i7.GetAllCategories {
  _FakeGetAllCategories_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreateCategory_6 extends _i1.SmartFake
    implements _i8.CreateCategory {
  _FakeCreateCategory_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateCategory_7 extends _i1.SmartFake
    implements _i9.UpdateCategory {
  _FakeUpdateCategory_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteCategory_8 extends _i1.SmartFake
    implements _i10.DeleteCategory {
  _FakeDeleteCategory_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCategoriesState_9 extends _i1.SmartFake
    implements _i11.CategoriesState {
  _FakeCategoriesState_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetAllAccounts_10 extends _i1.SmartFake
    implements _i12.GetAllAccounts {
  _FakeGetAllAccounts_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreateAccount_11 extends _i1.SmartFake
    implements _i13.CreateAccount {
  _FakeCreateAccount_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdateAccount_12 extends _i1.SmartFake
    implements _i14.UpdateAccount {
  _FakeUpdateAccount_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeleteAccount_13 extends _i1.SmartFake
    implements _i15.DeleteAccount {
  _FakeDeleteAccount_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccountsState_14 extends _i1.SmartFake
    implements _i16.AccountsState {
  _FakeAccountsState_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PaymentsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentsBloc extends _i1.Mock implements _i6.PaymentsBloc {
  MockPaymentsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllPayments get getAllPayments =>
      (super.noSuchMethod(
            Invocation.getter(#getAllPayments),
            returnValue: _FakeGetAllPayments_0(
              this,
              Invocation.getter(#getAllPayments),
            ),
          )
          as _i2.GetAllPayments);

  @override
  _i3.CreatePayment get createPayment =>
      (super.noSuchMethod(
            Invocation.getter(#createPayment),
            returnValue: _FakeCreatePayment_1(
              this,
              Invocation.getter(#createPayment),
            ),
          )
          as _i3.CreatePayment);

  @override
  _i4.UpdatePayment get updatePayment =>
      (super.noSuchMethod(
            Invocation.getter(#updatePayment),
            returnValue: _FakeUpdatePayment_2(
              this,
              Invocation.getter(#updatePayment),
            ),
          )
          as _i4.UpdatePayment);

  @override
  _i5.DeletePayment get deletePayment =>
      (super.noSuchMethod(
            Invocation.getter(#deletePayment),
            returnValue: _FakeDeletePayment_3(
              this,
              Invocation.getter(#deletePayment),
            ),
          )
          as _i5.DeletePayment);

  @override
  _i6.PaymentsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePaymentsState_4(this, Invocation.getter(#state)),
          )
          as _i6.PaymentsState);

  @override
  _i17.Stream<_i6.PaymentsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i6.PaymentsState>.empty(),
          )
          as _i17.Stream<_i6.PaymentsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i6.PaymentsEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.PaymentsEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.PaymentsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.PaymentsEvent>(
    _i18.EventHandler<E, _i6.PaymentsState>? handler, {
    _i18.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i18.Transition<_i6.PaymentsEvent, _i6.PaymentsState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i6.PaymentsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CategoriesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesBloc extends _i1.Mock implements _i11.CategoriesBloc {
  MockCategoriesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.GetAllCategories get getAllCategories =>
      (super.noSuchMethod(
            Invocation.getter(#getAllCategories),
            returnValue: _FakeGetAllCategories_5(
              this,
              Invocation.getter(#getAllCategories),
            ),
          )
          as _i7.GetAllCategories);

  @override
  _i8.CreateCategory get createCategory =>
      (super.noSuchMethod(
            Invocation.getter(#createCategory),
            returnValue: _FakeCreateCategory_6(
              this,
              Invocation.getter(#createCategory),
            ),
          )
          as _i8.CreateCategory);

  @override
  _i9.UpdateCategory get updateCategory =>
      (super.noSuchMethod(
            Invocation.getter(#updateCategory),
            returnValue: _FakeUpdateCategory_7(
              this,
              Invocation.getter(#updateCategory),
            ),
          )
          as _i9.UpdateCategory);

  @override
  _i10.DeleteCategory get deleteCategory =>
      (super.noSuchMethod(
            Invocation.getter(#deleteCategory),
            returnValue: _FakeDeleteCategory_8(
              this,
              Invocation.getter(#deleteCategory),
            ),
          )
          as _i10.DeleteCategory);

  @override
  _i11.CategoriesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCategoriesState_9(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i11.CategoriesState);

  @override
  _i17.Stream<_i11.CategoriesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i11.CategoriesState>.empty(),
          )
          as _i17.Stream<_i11.CategoriesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i11.CategoriesEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i11.CategoriesEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i11.CategoriesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i11.CategoriesEvent>(
    _i18.EventHandler<E, _i11.CategoriesState>? handler, {
    _i18.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i18.Transition<_i11.CategoriesEvent, _i11.CategoriesState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i11.CategoriesState>? change) =>
      super.noSuchMethod(
        Invocation.method(#onChange, [change]),
        returnValueForMissingStub: null,
      );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AccountsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountsBloc extends _i1.Mock implements _i16.AccountsBloc {
  MockAccountsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.GetAllAccounts get getAllAccounts =>
      (super.noSuchMethod(
            Invocation.getter(#getAllAccounts),
            returnValue: _FakeGetAllAccounts_10(
              this,
              Invocation.getter(#getAllAccounts),
            ),
          )
          as _i12.GetAllAccounts);

  @override
  _i13.CreateAccount get createAccount =>
      (super.noSuchMethod(
            Invocation.getter(#createAccount),
            returnValue: _FakeCreateAccount_11(
              this,
              Invocation.getter(#createAccount),
            ),
          )
          as _i13.CreateAccount);

  @override
  _i14.UpdateAccount get updateAccount =>
      (super.noSuchMethod(
            Invocation.getter(#updateAccount),
            returnValue: _FakeUpdateAccount_12(
              this,
              Invocation.getter(#updateAccount),
            ),
          )
          as _i14.UpdateAccount);

  @override
  _i15.DeleteAccount get deleteAccount =>
      (super.noSuchMethod(
            Invocation.getter(#deleteAccount),
            returnValue: _FakeDeleteAccount_13(
              this,
              Invocation.getter(#deleteAccount),
            ),
          )
          as _i15.DeleteAccount);

  @override
  _i16.AccountsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAccountsState_14(this, Invocation.getter(#state)),
          )
          as _i16.AccountsState);

  @override
  _i17.Stream<_i16.AccountsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i17.Stream<_i16.AccountsState>.empty(),
          )
          as _i17.Stream<_i16.AccountsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i16.AccountsEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i16.AccountsEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i16.AccountsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i16.AccountsEvent>(
    _i18.EventHandler<E, _i16.AccountsState>? handler, {
    _i18.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i18.Transition<_i16.AccountsEvent, _i16.AccountsState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void onChange(_i18.Change<_i16.AccountsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
