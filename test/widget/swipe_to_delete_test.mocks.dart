// Mocks generated by Mockito 5.4.6 from annotations
// in penpenny/test/widget/swipe_to_delete_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:penpenny/domain/usecases/payment/create_payment.dart' as _i3;
import 'package:penpenny/domain/usecases/payment/delete_payment.dart' as _i5;
import 'package:penpenny/domain/usecases/payment/get_all_payments.dart' as _i2;
import 'package:penpenny/domain/usecases/payment/update_payment.dart' as _i4;
import 'package:penpenny/presentation/blocs/payments/payments_bloc.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeGetAllPayments_0 extends _i1.SmartFake
    implements _i2.GetAllPayments {
  _FakeGetAllPayments_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCreatePayment_1 extends _i1.SmartFake implements _i3.CreatePayment {
  _FakeCreatePayment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUpdatePayment_2 extends _i1.SmartFake implements _i4.UpdatePayment {
  _FakeUpdatePayment_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDeletePayment_3 extends _i1.SmartFake implements _i5.DeletePayment {
  _FakeDeletePayment_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePaymentsState_4 extends _i1.SmartFake implements _i6.PaymentsState {
  _FakePaymentsState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PaymentsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPaymentsBloc extends _i1.Mock implements _i6.PaymentsBloc {
  MockPaymentsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetAllPayments get getAllPayments =>
      (super.noSuchMethod(
            Invocation.getter(#getAllPayments),
            returnValue: _FakeGetAllPayments_0(
              this,
              Invocation.getter(#getAllPayments),
            ),
          )
          as _i2.GetAllPayments);

  @override
  _i3.CreatePayment get createPayment =>
      (super.noSuchMethod(
            Invocation.getter(#createPayment),
            returnValue: _FakeCreatePayment_1(
              this,
              Invocation.getter(#createPayment),
            ),
          )
          as _i3.CreatePayment);

  @override
  _i4.UpdatePayment get updatePayment =>
      (super.noSuchMethod(
            Invocation.getter(#updatePayment),
            returnValue: _FakeUpdatePayment_2(
              this,
              Invocation.getter(#updatePayment),
            ),
          )
          as _i4.UpdatePayment);

  @override
  _i5.DeletePayment get deletePayment =>
      (super.noSuchMethod(
            Invocation.getter(#deletePayment),
            returnValue: _FakeDeletePayment_3(
              this,
              Invocation.getter(#deletePayment),
            ),
          )
          as _i5.DeletePayment);

  @override
  _i6.PaymentsState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakePaymentsState_4(this, Invocation.getter(#state)),
          )
          as _i6.PaymentsState);

  @override
  _i7.Stream<_i6.PaymentsState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i7.Stream<_i6.PaymentsState>.empty(),
          )
          as _i7.Stream<_i6.PaymentsState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i6.PaymentsEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.PaymentsEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i6.PaymentsState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.PaymentsEvent>(
    _i8.EventHandler<E, _i6.PaymentsState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i8.Transition<_i6.PaymentsEvent, _i6.PaymentsState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void onChange(_i8.Change<_i6.PaymentsState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
